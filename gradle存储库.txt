依赖项管理是一种以自动化方式声明、解析和使用项目所需依赖项的技术。
Gradle内建支持公开库：
1.mavenCentral()
	Maven库，一个流行的存储库，托管开放源代码，供Java项目使用，地址 https://repo.maven.apache.org/maven2/，默认名称 MavenRepo。
  mavenLocal()
    本地Maven库，在本地设置的Maven中查找依赖，名称 MavenLocal。
	查找maven设置 USER_HOME/.m2/settings.xml 优先 M2_HOME/conf/settings.xml，未找到就使用默认存储库位置 USER_HOME/.m2/repository。
	应尽量避免使用：
		①Maven将它用作缓存，而不是存储库，它可以只包含部分内容。
		如果Maven未下载项目的源文件或javadoc文件，Gradle就找不到它们，因为一旦找到项目，将在单个存储库搜索文件。
		②Gradle不信任本地存储库的内容。
		因为无法跟踪项目的来源，这是正确性和安全性问题。
		项目很容易被覆盖，这是正确性、安全性和再现性问题。
		③Gradle不为本地存储库执行缓存，因为元数据和项目可以更改。
		因此，构建速度较慢。
		存储库的顺序很重要，首先添加mavenLocal()意味着所有构建都将变慢。
	适用场景：项目组发布一个项目到本地Maven库，在另一个项目中通过Gradle使用。
2.jcenter() -- Bintray的JCenter库，所有流行的Maven开源项目库，包括直接发布到Bintray的项目，地址 https://jcenter.bintray.com/。
3.google() -- 谷歌的Maven库，托管特定于Android的项目，包括Android SDK，地址 https://dl.google.com/dl/android/maven2/。
4.maven(action) -- 自定义Maven库。

repositories {
	jcenter()
	jcenter {
		name = "nonDefaultName"
		artifactUrls = ["http://www.mycompany.com/artifacts1"]
	}
	mavenCentral artifactUrls: ["http://www.mycompany.com/artifacts1", "http://www.mycompany.com/artifacts2"]
    mavenCentral name: "nonDefaultName", artifactUrls: ["http://www.mycompany.com/artifacts1"]
    maven {
        url "http://repo.mycompany.com/maven2"
    }
	maven {
        url "http://repo.mycompany2.com/maven2"
		artifactUrls "http://repo.mycompany.com/jars"
        artifactUrls "http://repo.mycompany.com/jars2"
        credentials(AwsCredentials) {
            accessKey "myAccessKey"
            secretKey "mySecret"
			sessionToken "someSTSToken" // 可选
        }
        credentials {
            username 'user' // 用户名、密码不应该明文写入有版本控制的构建文件。可以将凭据存储在本地文件中，用开源凭据插件来加密、使用。
            password 'password'
        }
        authentication {
            basic(BasicAuthentication)
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
        authentication {
            digest(DigestAuthentication)
        }
		content {
			includeGroup "my.company" // 这个存储库只搜索项目组my.company的项目
			includeModule​ group "my.company",moduleName "project"
			includeVersion group "my.company",moduleName "project",version "v1.0.0"
			includeGroupByRegex "my.company.*" // 只搜索匹配正则表达式的项目
			includeModuleByRegex groupRegex "my.company.*",moduleNameRegex "project*"
			includeVersionByRegex groupRegex "my.company.*",moduleNameRegex "project*",versionRegex "v1.*"
			excludeGroup "my.company2" // 不搜索项目组my.company2的项目
		}
		mavenContent {
            releasesOnly() // 只包含release版本
        }
		mavenContent {
			snapshotsOnly() // 只包含snapshot版本
        }
		metadataSources {
			mavenPom() // Maven元数据文件
			gradleMetadata() // Gradle元数据文件
			artifact() // 可能不包含元数据文件，通过文件来搜索
			ignoreGradleMetadataRedirection() // 忽略POM中的Gradle元数据重定向标记
		}
    }
}
Gradle按存储库定义顺序搜索依赖。
	会忽略POM中定义的额外的存储库，只使用自己的构建中声明的存储库。
	会缓存解析的依赖，不需要设置本地Maven存储库。
name存储库组中的名称必须唯一，未指定时使用默认值。
artifactUrls查找依赖的额外地址，但不会用于查找POM。
credentials对存储库进行身份认证的指定类型的凭证。
authentication存储库的认证方案。
	继承Authentication的类型，已知子类BasicAuthentication、HttpHeaderAuthentication、DigestAuthentication。
content内容过滤器。可以按项目组、项目、版本严格筛选，也可以用正则表达式进行筛选。
	默认情况下，存储库包含所有内容而不排除任何内容。
	如果声明了include，将排除include之外的所有内容。
	如果声明了exclude，将包含exclude之外的所有内容。
	如果同时声明了include和exclude，将包含include包含和exclude不排除的内容。
mavenContent内容过滤器。
metadataSources元数据源。

---------------------------------------------------------------------------------------------------
依赖
	配置继承与组合
		每一个依赖应用于指定的作用域。
		作用域继承，重用依赖，testImplementation继承implementation。
configurations {
    smokeTest.extendsFrom testImplementation // 自定义继承
}
dependencies {
    testImplementation 'junit:junit:4.12'
    smokeTest 'org.apache.httpcomponents:httpclient:4.5.5'
}
	可解析、可使用配置
configurations {
	exposedApi { // 定义一个配置
		canBeResolved = false // 不可解析
		canBeConsumed = true // 可使用
	}
}

	java插件的配置项：
		implementation定义本地依赖，在项目外面不可见，依赖不传递
		api定义依赖，在项目外面可见
		compileOnly定义编译时依赖，只在编译时有效，不参与打包
		runtimeOnly定义运行时依赖，只在打包时有效，不参与编译
		testImplementation定义测试依赖，只在单元测试和打包测试时有效
		testCompileOnly定义测试编译时依赖，只在编译测试类时有效
		testRuntimeOnly定义测试运行时依赖，只在执行测试类时有效
	war插件（继承java插件，添加打war包的任务）的配置项：
		providedCompile定义编译时依赖
		providedRuntime定义运行时依赖

	声明依赖
dependencies {
	implementation 'commons-lang:commons-lang:2.6' // 字符串表示法
	implementation group: 'com.google.code.guice', name: 'guice', version: '1.0' // map风格
	testImplementation 'org.mockito:mockito:1.9.0-rc1', 'org.springframework:spring-core:2.5'
	testImplementation([group: 'org.springframework', name: 'spring-core', version: '2.5'], [group: 'org.springframework', name: 'spring-aop', version: '2.5'])
	implementation files('hibernate.jar', 'libs/spring.jar') // 任意文件，依赖与项目一起加入版本控制系统，不加入Gradle存储库
	implementation fileTree('libs') // 目录
	implementation('org.hibernate:hibernate:3.1') {
		force = true // 当版本冲突时，强制使用此版本
		exclude module: 'cglib' // 排除传递依赖项：通过项目名
		exclude group: 'org.jmock' // 通过项目组
		exclude group: 'org.unwanted', module: 'iAmBuggy' // 通过项目组和项目名
		transitive = false // 禁用所有传递依赖项
	}
}
// 多项目构建，定义项目web-service依赖utils和api
project(':web-service') {
    dependencies {
        implementation project(':utils')
        implementation project(':api')
    }
}